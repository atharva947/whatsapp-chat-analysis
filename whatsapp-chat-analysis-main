import numpy as np 
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.linear_model import LogisticRegression


data = pd.read_csv("fake_news.csv")

data['fake'] = data ['label'].apply(lambda x: 0 if x == "REAL" else 1)

data = data.drop ("label",axis=1)

x,y = data ['text'],data['fake']

x_train, x_test, y_train,y_test =train_test_split(x,y,test_size=0.2)
vectorizer = TfidfVectorizer(stop_words="english",max_df = 0.7)
x_train_vectorized = vectorizer.fit_transform(x_train)
x_test_vectorized = vectorizer.transform(x_test)

# print(y_train)
clf = LinearSVC()

clf.fit(x_train_vectorized, y_train)

clf.score(x_test_vectorized, y_test)

# model = LogisticRegression()
# model.fit(x_train_vectorized, y_train)
  
# # testing the model
# print(accuracy_score(y_train, model.predict(x_train)))
# print(accuracy_score(y_test, model.predict(x_test)))

len(y_test) * 0.9479

len(y_test)

with open ("mtext.txt","w",encoding="utf-8") as f:
    f.write(x_test.iloc[10])
with open ("mtext.txt","r",encoding="utf-8") as f:
    text =f.read()

    vectorized_text = vectorizer.transform([text])

    print(clf.predict(vectorized_text))

    # array([1], dtype=int64)

    # y_test.iloc[10]